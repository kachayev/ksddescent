
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_simple_gaussian.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_simple_gaussian.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_simple_gaussian.py:


==================================
Different algorithms on a Gaussian
==================================

.. GENERATED FROM PYTHON SOURCE LINES 6-95



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_simple_gaussian_001.png
          :alt: plot simple gaussian
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_simple_gaussian_002.png
          :alt: plot simple gaussian
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_simple_gaussian_003.png
          :alt: plot simple gaussian
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_simple_gaussian_004.png
          :alt: plot simple gaussian
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0 tensor(239.4394)
    100 tensor(3.3856e-05)
    200 tensor(9.1834e-06)
    300 tensor(3.7388e-06)
    400 tensor(1.9704e-06)
    500 tensor(1.2382e-06)
    600 tensor(7.9216e-07)
    700 tensor(5.0560e-07)
    800 tensor(3.3561e-07)
    900 tensor(2.4073e-07)
    Took 0.29 sec, 170 iterations, loss = 5.64e+03






|

.. code-block:: default


    # Author: Pierre Ablin <pierre.ablin@ens.fr>
    #
    # License: MIT

    import torch
    import math
    from ksddescent import ksdd_lbfgs, ksdd_gradient
    from ksddescent.contenders import svgd, mmd_lbfgs
    import matplotlib.pyplot as plt
    import numpy as np


    def score(x):
        return -x / 0.3


    def potential(x):
        return (x ** 2).sum(dim=1)


    def sampler(n_points):
        return math.sqrt(0.3) * torch.randn(n_points, 1)


    n_samples = 50
    p = 2

    x = 1.5 + torch.randn(n_samples, p) / 3

    bw = 0.1
    x_ksd, ksd_traj, _ = ksdd_lbfgs(x.clone(), score, bw=bw, store=True)

    x_grad, grad_traj, _ = ksdd_gradient(x.clone(), score, 0.3, bw=bw, store=True)

    x_svgd, svgd_traj, _ = svgd(
        x.clone(), score, 0.5, bw=bw, store=True, verbose=True
    )

    x_mmd, mmd_traj, _ = mmd_lbfgs(
        x.clone(), sampler(3 * n_samples), bw=bw, store=True
    )

    labels = ["KSD L-BFGS", "KSD Grad", "SVGD", "MMD"]
    methods = ["bfgs", "grad", "svgd", "mmd"]
    colors = ["blue", "purple", "orange", "red"]
    for x_final, traj, label, color, method in zip(
        [x_ksd, x_grad, x_svgd, x_mmd],
        [ksd_traj, grad_traj, svgd_traj, mmd_traj],
        labels,
        colors,
        methods,
    ):
        plt.figure(figsize=(2, 2))
        traj = np.array([x.detach().numpy() for x in traj])
        if method == "mmd":
            alpha = 0.2
        else:
            alpha = 0.2
        plt.plot(traj[:, :, 0], traj[:, :, 1], c="k", alpha=alpha, linewidth=0.5)
        s = 3
        plt.scatter(x[:, 0], x[:, 1], s=s, color="green", zorder=1)

        x_final = x_final.detach()
        plt.scatter(
            x_final[:, 0], x_final[:, 1], label=label, s=s, c=color, zorder=10
        )
        plt.legend()

        x_ = np.linspace(-1.2, 3)
        y_ = np.linspace(-1.2, 3)
        X, Y = np.meshgrid(x_, y_)
        XX = torch.tensor(np.array([X.ravel(), Y.ravel()]).T)
        Z = potential(XX).reshape(X.shape).detach().numpy()

        plt.contour(X, Y, Z, levels=10, colors="k")
        plt.tick_params(
            axis="both",
            which="both",
            bottom=False,
            top=False,
            labelbottom=False,
            left=False,
            right=False,
            labelleft=False,
        )
        plt.xlim(min(x_), max(x_))
        plt.ylim(min(y_), max(y_))
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.856 seconds)


.. _sphx_glr_download_auto_examples_plot_simple_gaussian.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_simple_gaussian.py <plot_simple_gaussian.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_simple_gaussian.ipynb <plot_simple_gaussian.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
